# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from serial_comm/RadarCluster.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RadarCluster(genpy.Message):
  _md5sum = "0840e87e925ffcb716d5163155ce63c6"
  _type = "serial_comm/RadarCluster"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# 单个雷达点消息
float64 x          # X坐标 (m)
float64 y          # Y坐标 (m) 
float64 z          # Z坐标 (m)
float64 velocity   # 速度 (m/s)
float64 intensity  # 强度/功率值
float64 range      # 距离 (m)
float64 azimuth    # 方位角 (度)
float64 elevation  # 俯仰角 (度)"""
  __slots__ = ['x','y','z','velocity','intensity','range','azimuth','elevation']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,z,velocity,intensity,range,azimuth,elevation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarCluster, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.intensity is None:
        self.intensity = 0.
      if self.range is None:
        self.range = 0.
      if self.azimuth is None:
        self.azimuth = 0.
      if self.elevation is None:
        self.elevation = 0.
    else:
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.velocity = 0.
      self.intensity = 0.
      self.range = 0.
      self.azimuth = 0.
      self.elevation = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8d().pack(_x.x, _x.y, _x.z, _x.velocity, _x.intensity, _x.range, _x.azimuth, _x.elevation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.x, _x.y, _x.z, _x.velocity, _x.intensity, _x.range, _x.azimuth, _x.elevation,) = _get_struct_8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8d().pack(_x.x, _x.y, _x.z, _x.velocity, _x.intensity, _x.range, _x.azimuth, _x.elevation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.x, _x.y, _x.z, _x.velocity, _x.intensity, _x.range, _x.azimuth, _x.elevation,) = _get_struct_8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
