// Generated by gencpp from file serial_comm/RadarCluster.msg
// DO NOT EDIT!


#ifndef SERIAL_COMM_MESSAGE_RADARCLUSTER_H
#define SERIAL_COMM_MESSAGE_RADARCLUSTER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_comm
{
template <class ContainerAllocator>
struct RadarCluster_
{
  typedef RadarCluster_<ContainerAllocator> Type;

  RadarCluster_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , velocity(0.0)
    , intensity(0.0)
    , range(0.0)
    , azimuth(0.0)
    , elevation(0.0)  {
    }
  RadarCluster_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , velocity(0.0)
    , intensity(0.0)
    , range(0.0)
    , azimuth(0.0)
    , elevation(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _intensity_type;
  _intensity_type intensity;

   typedef double _range_type;
  _range_type range;

   typedef double _azimuth_type;
  _azimuth_type azimuth;

   typedef double _elevation_type;
  _elevation_type elevation;





  typedef boost::shared_ptr< ::serial_comm::RadarCluster_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_comm::RadarCluster_<ContainerAllocator> const> ConstPtr;

}; // struct RadarCluster_

typedef ::serial_comm::RadarCluster_<std::allocator<void> > RadarCluster;

typedef boost::shared_ptr< ::serial_comm::RadarCluster > RadarClusterPtr;
typedef boost::shared_ptr< ::serial_comm::RadarCluster const> RadarClusterConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_comm::RadarCluster_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_comm::RadarCluster_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_comm::RadarCluster_<ContainerAllocator1> & lhs, const ::serial_comm::RadarCluster_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.velocity == rhs.velocity &&
    lhs.intensity == rhs.intensity &&
    lhs.range == rhs.range &&
    lhs.azimuth == rhs.azimuth &&
    lhs.elevation == rhs.elevation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_comm::RadarCluster_<ContainerAllocator1> & lhs, const ::serial_comm::RadarCluster_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_comm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial_comm::RadarCluster_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_comm::RadarCluster_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_comm::RadarCluster_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_comm::RadarCluster_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_comm::RadarCluster_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_comm::RadarCluster_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_comm::RadarCluster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0840e87e925ffcb716d5163155ce63c6";
  }

  static const char* value(const ::serial_comm::RadarCluster_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0840e87e925ffcb7ULL;
  static const uint64_t static_value2 = 0x16d5163155ce63c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_comm::RadarCluster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_comm/RadarCluster";
  }

  static const char* value(const ::serial_comm::RadarCluster_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_comm::RadarCluster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 单个雷达点消息\n"
"float64 x          # X坐标 (m)\n"
"float64 y          # Y坐标 (m) \n"
"float64 z          # Z坐标 (m)\n"
"float64 velocity   # 速度 (m/s)\n"
"float64 intensity  # 强度/功率值\n"
"float64 range      # 距离 (m)\n"
"float64 azimuth    # 方位角 (度)\n"
"float64 elevation  # 俯仰角 (度)\n"
;
  }

  static const char* value(const ::serial_comm::RadarCluster_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_comm::RadarCluster_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.velocity);
      stream.next(m.intensity);
      stream.next(m.range);
      stream.next(m.azimuth);
      stream.next(m.elevation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarCluster_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_comm::RadarCluster_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_comm::RadarCluster_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "intensity: ";
    Printer<double>::stream(s, indent + "  ", v.intensity);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "range: ";
    Printer<double>::stream(s, indent + "  ", v.range);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "azimuth: ";
    Printer<double>::stream(s, indent + "  ", v.azimuth);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "elevation: ";
    Printer<double>::stream(s, indent + "  ", v.elevation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_COMM_MESSAGE_RADARCLUSTER_H
