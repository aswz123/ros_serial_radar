// Generated by gencpp from file serial_comm/RadarPointCloud.msg
// DO NOT EDIT!


#ifndef SERIAL_COMM_MESSAGE_RADARPOINTCLOUD_H
#define SERIAL_COMM_MESSAGE_RADARPOINTCLOUD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <serial_comm/RadarCluster.h>

namespace serial_comm
{
template <class ContainerAllocator>
struct RadarPointCloud_
{
  typedef RadarPointCloud_<ContainerAllocator> Type;

  RadarPointCloud_()
    : header()
    , points()
    , num_points(0)  {
    }
  RadarPointCloud_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , points(_alloc)
    , num_points(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::serial_comm::RadarCluster_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::serial_comm::RadarCluster_<ContainerAllocator> >> _points_type;
  _points_type points;

   typedef uint32_t _num_points_type;
  _num_points_type num_points;





  typedef boost::shared_ptr< ::serial_comm::RadarPointCloud_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_comm::RadarPointCloud_<ContainerAllocator> const> ConstPtr;

}; // struct RadarPointCloud_

typedef ::serial_comm::RadarPointCloud_<std::allocator<void> > RadarPointCloud;

typedef boost::shared_ptr< ::serial_comm::RadarPointCloud > RadarPointCloudPtr;
typedef boost::shared_ptr< ::serial_comm::RadarPointCloud const> RadarPointCloudConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_comm::RadarPointCloud_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_comm::RadarPointCloud_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_comm::RadarPointCloud_<ContainerAllocator1> & lhs, const ::serial_comm::RadarPointCloud_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.points == rhs.points &&
    lhs.num_points == rhs.num_points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_comm::RadarPointCloud_<ContainerAllocator1> & lhs, const ::serial_comm::RadarPointCloud_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_comm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial_comm::RadarPointCloud_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_comm::RadarPointCloud_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_comm::RadarPointCloud_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_comm::RadarPointCloud_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_comm::RadarPointCloud_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_comm::RadarPointCloud_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_comm::RadarPointCloud_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a6e91c51cd4c229b14e7ec1d1022ed42";
  }

  static const char* value(const ::serial_comm::RadarPointCloud_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa6e91c51cd4c229bULL;
  static const uint64_t static_value2 = 0x14e7ec1d1022ed42ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_comm::RadarPointCloud_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_comm/RadarPointCloud";
  }

  static const char* value(const ::serial_comm::RadarPointCloud_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_comm::RadarPointCloud_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 雷达点云消息\n"
"Header header                          # 标准ROS头部\n"
"serial_comm/RadarCluster[] points      # 雷达点数组\n"
"uint32 num_points                      # 点数量\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: serial_comm/RadarCluster\n"
"# 单个雷达点消息\n"
"float64 x          # X坐标 (m)\n"
"float64 y          # Y坐标 (m) \n"
"float64 z          # Z坐标 (m)\n"
"float64 velocity   # 速度 (m/s)\n"
"float64 intensity  # 强度/功率值\n"
"float64 range      # 距离 (m)\n"
"float64 azimuth    # 方位角 (度)\n"
"float64 elevation  # 俯仰角 (度)\n"
;
  }

  static const char* value(const ::serial_comm::RadarPointCloud_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_comm::RadarPointCloud_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.points);
      stream.next(m.num_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarPointCloud_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_comm::RadarPointCloud_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_comm::RadarPointCloud_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "points: ";
    if (v.points.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::serial_comm::RadarCluster_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.points[i]);
    }
    if (v.points.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "num_points: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_points);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_COMM_MESSAGE_RADARPOINTCLOUD_H
